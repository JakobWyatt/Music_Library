// FILE: Validation_Pseudocode.txt
// AUTHOR: Jakob Wyatt
// UNIT: OOPD
// PURPOSE: Pseudocode for validation for music file inputs.
// REFERENCES: None
// COMMENTS: None
// REQUIRES: None
// Last Mod: 27/09/2018
// Modification history:
//  None

CONSTANTS:
    //These error messages are commonly used by the Validation class.
    NAME_ERROR := "Names cannot be empty."
    ARTIST_ERROR := "Artist names cannot be empty."
    DURATION_ERROR := "Duration must be a valid time between 0.0 and 9.59 " +
        "inclusive. Check documentation.txt for more information."
    TRACK_NUMBER_ERROR := "Track number must be a valid integer between 0 and" +
        " 20 inclusive."
    PLAY_SPEED_ERROR := "The only supported play speeds are '33 1/3 RPM', " +
        "'45 RPM', and '78 RPM'. Check documentation.txt for " +
        "more information."
    TYPE_ERROR := "The only supported digital " +
        "music file types are 'wav', 'mp3', and 'acc'. " +
        "Check documentation.txt for more information."
    START_TIME_ERROR := "Start time must be a valid time between 0.0 and " +
        "160.0 inclusive. Check documentation.txt for more information."
    SIDE_ERROR  := "The only supported cassette sides are 'A' and 'B'. " +
        "Check documentation.txt for more information."
END CONSTANTS




//NAME: recordErrors
//PURPOSE:
//  Returns a string, detailing any errors in the record information.
//  If no errors are found, return null.
//IMPORTS: name, artist, duration, trackNumber, playSpeed
//EXPORT: error
//Assertions:
//  Pre: None.
//  Post: If there are no errors, return null.
//REMARKS: None.

SUBMODULE: recordErrors
IMPORTS: name (String), artist (String), duration (Real),
    trackNumber (Integer), playSpeed (Integer)
EXPORT: error (String)
ALGORITHM:
    error := ""
    IF !isValidName <- name THEN
        error := error + NAME_ERROR + "\n"
    END IF
    IF !isValidArtist <- artist THEN
        error := error + ARTIST_ERROR + "\n"
    END IF
    IF !isValidDuration <- duration THEN
        error := error + DURATION_ERROR + "\n"
    END IF
    IF !isValidTrackNumber <- trackNumber THEN
        error := error + TRACK_NUMBER_ERROR + "\n"
    END IF
    IF !isValidPlaySpeed <- playSpeed THEN
        error := error + PLAY_SPEED_ERROR + "\n"
    END IF
    //If there are no errors, then error.length = 0,
    //  as the if statements above always append newlines to error.
    IF error.length = 0 THEN
        error := NULL
    END IF
END




//NAME: digitalErrors
//PURPOSE:
//  Returns a string, detailing any errors in
//      the digital music file information.
//  If no errors are found, return null.
//IMPORTS: name, artist, duration, type
//EXPORT: valid
//Assertions:
//  Pre: None.
//  Post: If there are no errors, return null.
//REMARKS: None.

SUBMODULE: digitalErrors
IMPORTS: name (String), artist (String), duration (Real),
    type (String)
EXPORT: error (String)
ALGORITHM:
    error := ""
    IF !isValidName <- name THEN
        error := error + NAME_ERROR + "\n"
    END IF
    IF !isValidArtist <- artist THEN
        error := error + ARTIST_ERROR + "\n"
    END IF
    IF !isValidDuration <- duration THEN
        error := error + DURATION_ERROR + "\n"
    END IF
    IF !isValidType <- type THEN
        error := error + TYPE_ERROR + "\n"
    END IF
    //If there are no errors, then error.length = 0,
    //  as the if statements above always append newlines to error.
    IF error.length = 0 THEN
        error := NULL
    END IF
END




//NAME: cassetteErrors
//PURPOSE:
//  Returns a string, detailing any errors in the cassette information.
//  If no errors are found, return null.
//IMPORTS: name, artist, duration, trackNumber, startTime, side
//EXPORT: valid
//Assertions:
//  Pre: None.
//  Post: If there are no errors, return null.
//REMARKS: None.

SUBMODULE: recordErrors
IMPORTS: name (String), artist (String), duration (Real),
    trackNumber (Integer), startTime (Real), side (String)
EXPORT: error (String)
ALGORITHM:
    error := ""
    IF !isValidName <- name THEN
        error := error + NAME_ERROR + "\n"
    END IF
    IF !isValidArtist <- artist THEN
        error := error + ARTIST_ERROR + "\n"
    END IF
    IF !isValidDuration <- duration THEN
        error := error + DURATION_ERROR + "\n"
    END IF
    IF !isValidTrackNumber <- trackNumber THEN
        error := error + TRACK_NUMBER_ERROR + "\n"
    END IF
    IF !isValidStartTime <- startTime THEN
        error := error + START_TIME_ERROR + "\n"
    END IF
    IF !isValidSide <- side THEN
        error := error + SIDE_ERROR + "\n"
    END IF
    //If there are no errors, then error.length = 0,
    //  as the if statements above always append newlines to error.
    IF error.length = 0 THEN
        error := NULL
    END IF
END




//NAME: isValidName
//PURPOSE: Determines if a song name is valid.
//IMPORTS: Song name
//EXPORT: valid
//Assertions:
//  Pre: None
//  Post: valid = TRUE if the song name is valid.
//          Otherwise, valid = FALSE.
//REMARKS: The validity of a song name is defined in documentation.txt.

SUBMODULE: isValidName
IMPORTS: name (String)
EXPORT: valid (Boolean)
ALGORITHM:
    valid := !nullOrEmpty <- name
END




//NAME: isValidArtist
//PURPOSE: Determines if an artist's name is valid.
//IMPORTS: Artist name
//EXPORT: valid
//Assertions:
//  Pre: None
//  Post: valid = TRUE if the artist name is valid.
//          Otherwise, valid = FALSE.
//REMARKS: The validity of an artist name is
//  defined in documentation.txt.

SUBMODULE: isValidArtist
IMPORTS: artist (String)
EXPORT: valid (Boolean)
ALGORITHM:
    valid := !nullOrEmpty <- artist
END




//NAME: isValidDuration
//PURPOSE: Determines if a duration is valid.
//IMPORTS: Song duration
//EXPORTS: valid
//Assertions:
//  Pre: None.
//  Post: valid = TRUE if the duration is valid.
//          Otherwise, valid = FALSE.
//REMARKS: The validity of a song duration is
//  defined in documentation.txt.

SUBMODULE: isValidDuration
IMPORTS: duration (Real)
EXPORT: valid (Boolean)
ALGORITHM:
    valid := TRUE
    seconds := (Convert to Integer)( duration x 100.0 ) MOD 100

    IF duration <= 0.0 OR duration >= 9.60 THEN
        valid := FALSE
    END IF
    IF seconds < 0 OR seconds >= 60 THEN
        valid := FALSE
    END IF
END




//NAME: isValidTrackNumber
//PURPOSE: Determines if a track number is valid.
//IMPORTS: Track number
//EXPORTS: valid
//Assertions:
//  Pre: None
//  Post: valid = TRUE if the trackNumber is valid.
//          Otherwise, valid = FALSE.
//REMARKS: The validity of a track number is
//  defined in documentation.txt.

SUBMODULE: isValidTrackNumber
IMPORTS: trackNumber (Integer)
EXPORT: valid (Boolean)
ALGORITHM:
    valid := TRUE
    IF trackNumber < 0 OR trackNumber > 20 THEN
        valid := FALSE
    END IF
END




//NAME: isValidPlaySpeed
//PURPOSE: Determines if a play speed is valid.
//IMPORTS: Record play speed
//EXPORT: valid
//Assertions:
//  Pre: None
//  Post: valid = TRUE if the play speed is valid.
//          Otherwise, valid = FALSE.
//REMARKS: The validity of a play speed is defined in documentation.txt.

SUBMODULE: isValidPlaySpeed
IMPORTS: playSpeed (String)
EXPORT: valid (Boolean)
ALGORITHM:
    playSpeedUpper := toUpperCase <- playSpeed
    valid :=    playSpeedUpper EQUALS "33 1/3 RPM" OR
                playSpeedUpper EQUALS "45 RPM" OR
                playSpeedUpper EQUALS "78 RPM"
END




//NAME: isValidType
//PURPOSE: Determines if a digital music type is valid.
//IMPORTS: Digital music file type
//EXPORT: valid
//Assertions:
//  Pre: None
//  Post: valid = TRUE if the digital music type is valid.
//          Otherwise, valid = FALSE.
//REMARKS: The validity of a digital music file type is
//  defined in documentation.txt.

SUBMODULE: isValidType
IMPORTS: type (String)
EXPORT: valid (Boolean)
ALGORITHM:
    typeLower := toLowerCase <- type
    valid :=    typeLower EQUALS "wav" OR
                typeLower EQUALS "mp3" OR
                typeLower EQUALS "acc"
END




//NAME: isValidStartTime
//PURPOSE: Determines if a start time is valid.
//IMPORTS: Start time of a cassette
//EXPORT: valid
//Assertions:
//  Pre: None
//  Post: valid = TRUE if the start time is valid.
//          Otherwise, valid = false.
//REMARKS: The validity of a song name is defined in documentation.txt.

SUBMODULE: isValidStartTime
IMPORTS: startTime (Real)
EXPORT: valid (Boolean)
ALGORITHM:
    valid := TRUE
    seconds := (Convert to Integer)( startTime x 100.0 ) MOD 100

    IF startTime < 0.0 OR startTime > 160.0 THEN
        valid := FALSE
    END IF
    IF seconds < 0 OR seconds >= 60 THEN
        valid := FALSE
    END IF
END




//NAME: isValidSide
//PURPOSE: Determines if a cassette side is valid.
//IMPORTS: Side of a cassette (as a string)
//EXPORTS: valid
//Assertions:
//  Pre: None
//  Post: valid = TRUE if the side is valid.
//          Otherwise, valid = FALSE.
//REMARKS: The validity of a cassette side is
//  defined in documentation.txt.

SUBMODULE: isValidType
IMPORTS: type (String)
EXPORT: valid (Boolean)
ALGORITHM:
    typeUpper := toUpperCase <- type
    valid :=    typeUpper EQUALS "A" OR
                typeUpper EQUALS "B"
END




//NAME: nullOrEmpty
//PURPOSE: Determines if a string is either null or empty.
//IMPORTS: x
//EXPORT: Null or Empty
//Assertions:
//  Pre: None
//  Post: If the string is either null or empty, return true.
//          Otherwise, return false.
//REMARKS: None

SUBMODULE: nullOrEmpty
IMPORTS: x (String)
EXPORT: isNullOrEmpty (Boolean)
ALGORITHM:
    isNullOrEmpty := FALSE
    IF x = NULL THEN
        isNullOrEmpty := TRUE
    END IF
    IF x.length = 0 THEN
        isNullOrEmpty := TRUE
END
