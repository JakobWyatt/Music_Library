// FILE: UserInterface_Pseudocode.java
// AUTHOR: Jakob Wyatt
// UNIT: OOPD
// PURPOSE: Pseudocode for User IO for Music Library.
// REFERENCES: None
// COMMENTS: None
// REQUIRES: FileManager
// Last Mod: 27/09/2018
// Modification history:
//  None

//NAME: menu
//PURPOSE: Display the top level menu to interface with the user.
//IMPORTS: None
//EXPORT: None
//Assertion:
//  Pre: None
//  Post: None
//REMARKS: If EOF has been reached on the command line,
//      a NoSuchElementException will be thrown.
//  If the input stream cannot be read from,
//      an IllegalStateException will be thrown.
//  If the file could not be found,
//      a FileNotFoundException error is thrown.
//  If there was an error while reading the file,
//      an IOException is thrown.

SUBMODULE: menu
IMPORTS: None
EXPORT: None
ALGORITHM:
    option := 0
    prompt := "\n 1: Add songs to your library.\n" +
            "2: Find the total duration of music in your library.\n" +
            "3: Print all play instructions for your entire library.\n" +
            "4: Print the play instructions for a specific song.\n" +
            "5: Find the number of songs and total run time of a given " +
                "media type.\n" +
            "6: Output your library to a file.\n" +
            "7: Exit the program.\n"

    OUTPUT "\n Welcome to Music Library, the easy to use " +
            "program that manages your music.\n" +
            "Please enter a file name to create your library.\n"

    //As the library must be initialized before the program starts,
    //  if file input fails, we will exit the program.
    TRY
        FileManager.inputFile <- None
    CATCH File Input Error
        THROW File Input Error
    END TRY CATCH

    WHILE option != 7 DO
        option := promptRangedIntInput <- prompt, 1, 8
        CASE option
            1:
                notImplemented <- "Adding songs to your library"
            2:
                notImplemented <- "Finding the total duration of your library"
            3:
                notImplemented <- "Printing play instructions for all your songs"
            4:
                notImplemented <- "Searching for a specific song"
            5:
                mediaSearchMenu <- None
            6:
                FileManager.outputFile <- None
            7:
                OUTPUT "Goodbye."
        END CASE
    END WHILE
END




//NAME: mediaSearchMenu
//PURPOSE: Display the menu of different media types
//IMPORTS: None
//EXPORT: None
//Assertions:
//  Pre: None
//  Post: None
//REMARKS: If EOF has been reached on the command line,
//      a NoSuchElementException will be thrown.
//  If the input stream cannot be read from,
//      an IllegalStateException will be thrown.

SUBMODULE: mediaSearchMenu
IMPORTS: None
EXPORT: None
ALGORITHM:
    prompt := "Please enter the media type to search for.\n" +
            "1: Record\n" +
            "2: Digital\n" +
            "3: Cassette\n" +
            "4: Exit the menu\n"
    option := promptRangedIntInput <- prompt, 1, 5

    CASE option
        1:
            recordSearchMenu <- None
        2:
            digitalSearchMenu <- None
        3:
            cassetteSearchMenu <- None
    END CASE
END




//NAME: recordSearchMenu
//PURPOSE: Display the submenu for the record media type.
//IMPORTS: None
//EXPORT: None
//Assertions:
//  Pre: None
//  Post: None
//REMARKS: If EOF has been reached on the command line,
//      a NoSuchElementException will be thrown.
//  If the input stream cannot be read from,
//      an IllegalStateException will be thrown.

SUBMODULE: recordSearchMenu
IMPORTS: None
EXPORT: None
ALGORITHM:
    prompt := "Please enter the play speed of the record.\n" +
            "1: 33 1/3 RPM\n" +
            "2: 45 RPM\n" +
            "3: 78 RPM\n" +
            "4: Exit the menu\n"
    option := promptRangedIntInput <- prompt, 1, 5
    IF option != 4 THEN
        notImplemented <- "Finding the number of songs and total run " +
                "time of a given media type"
    END IF
END




//NAME: digitalSearchMenu
//PURPOSE: Display the submenu for the digital media type.
//IMPORTS: None
//EXPORT: None
//Assertions:
//  Pre: None
//  Post: None
//REMARKS: If EOF has been reached on the command line,
//      a NoSuchElementException will be thrown.
//  If the input stream cannot be read from,
//      an IllegalStateException will be thrown.

SUBMODULE: digitalSearchMenu
IMPORTS: None
EXPORT: None
ALGORITHM:
    prompt := "Please enter the codec of the music file.\n" +
            "1: wav\n" +
            "2: mp3\n" +
            "3: acc\n" +
            "4: Exit the menu\n"
    option := promptRangedIntInput <- prompt, 1, 5
    IF option != 4 THEN
        notImplemented <- "Finding the number of songs and total run " +
                "time of a given media type"
    END IF
END




//NAME: cassetteSearchMenu
//PURPOSE: Display the submenu for the cassette media type.
//IMPORTS: None
//EXPORT: None
//Assertions:
//  Pre: None
//  Post: None
//REMARKS: If EOF has been reached on the command line,
//      a NoSuchElementException will be thrown.
//  If the input stream cannot be read from,
//      an IllegalStateException will be thrown.

SUBMODULE: cassetteSearchMenu
IMPORTS: None
EXPORT: None
ALGORITHM:
    prompt := "Please enter the side of the cassette.\n" +
            "1: Side A\n" +
            "2: Side B\n" +
            "3: Exit the menu\n"
    option := promptRangedIntInput <- prompt, 1, 4
    IF option != 3 THEN
        notImplemented <- "Finding the number of songs and total run " +
                "time of a given media type"
    END IF
END




//NAME: notImplemented
//PURPOSE: Inform the user that a certain feature is not implemented yet.
//IMPORTS: The feature that is not currently implemented
//EXPORT: None
//Assertions:
//  Pre: None
//  Post: None
//REMARKS: None

SUBMODULE: notImplemented
IMPORTS: feature (String)
EXPORT: None
ALGORITHM:
    OUTPUT feature + " is not yet implemented."
END




//NAME: promptRangedIntInput
//PURPOSE: Prompt the user to input an input in the range [low, high)
//IMPORTS: User Prompt, low, high
//EXPORT: User Input
//Assertions:
//  Pre: low < high
//  Post: User Input is in the range [low, high)
//REMARKS: If EOF has been reached on the command line,
//      a NoSuchElementException will be thrown.
//  If the input stream cannot be read from,
//      an IllegalStateException will be thrown.

SUBMODULE: promptRangedIntInput
IMPORTS: prompt (String), low (Integer), high (Integer)
EXPORT: input (Integer)
ALGORITHM:
    error := "Please enter an integer between " + low +
        " and " +  ( high - 1 ) + " inclusive.\n"
    strout := prompt

    DO
        OUTPUT strout
        strout := error
        INPUT input (Integer)
    WHILE input < low OR input >= high
END
