// FILE: Record_Pseudocode.txt
// AUTHOR: Jakob Wyatt
// UNIT: OOPD
// PURPOSE: Class to contain records.
// REFERENCES: None
// COMMENTS: None
// REQUIRES: None
// Last Mod: 16/10/2018
// Modification history:
//  None

CLASS Record INHERITS FROM Music

    CLASS CONSTANTS:

    //public class constants
    //all valid ranges are represented in the form [min, max)
    TRACK_NUMBER_MIN := 0
    TRACK_NUMBER_MAX := 21
    TRACK_NUMBER_ERROR := "Track number " +
        "must be a valid integer between 0 and 20 inclusive."
    PLAY_SPEED_ERROR := "The only supported " +
        "play speeds are '33 1/3 RPM', '45 RPM', and '78 RPM'. " +
        "Check documentation.txt for more information."




    PRIVATE CLASS CONSTANTS:

    PLAY_SPEED_VALID (ARRAY OF String) := { "33 1/3 RPM", "45 RPM",
        "78 RPM" }




    CLASS FIELDS:

    trackNumber (Integer)
    playSpeed (String)



    PUBLIC SUBMODULES:

    DEFAULT CONSTRUCTOR
    IMPORTS: None
    EXPORT:
    ALGORITHM:
        CONSTRUCT SUPER USING None
        trackNumber := TRACK_NUMBER_MIN
        playSpeed := PLAY_SPEED_VALID[0]
    END




    COPY CONSTRUCTOR
    IMPORTS: inRecord (Record)
    EXPORT:
    ALGORITHM:
        CONSTRUCT SUPER USING inRecord
        trackNumber := inRecord.getTrackNumber <- None
        playSpeed := inRecord.getPlaySpeed <- None
    END




    ALTERNATE CONSTRUCTOR:
    IMPORTS: inName (String), inArtist (String), inDuration (String),
        inTrackNumber (Integer), inPlaySpeed (String)
    EXPORT:
    ALGORITHM:
        CONSTRUCT SUPER USING inName, inArtist, inDuration

        IF inPlaySpeed = NULL THEN
            THROW IllegalArgument <- PLAY_SPEED_ERROR
        END IF
        inPlaySpeedUpper := inPlaySpeed.toUpperCase <- None

        validateRecord <- inTrackNumber, inPlaySpeedUpper

        trackNumber := inTrackNumber
        playSpeed := inPlaySpeedUpper
    END




    CSV CONSTRUCTOR
    IMPORTS: csv (String)
    EXPORT:
    ALGORITHM:
        CONSTRUCT SUPER USING None

        //ensure that we can read from the csv data
        IF csv = NULL THEN
            THROW IllegalArgument <- "CSV data cannot be null."
        END IF

        data = csv.split <- ","
        //ensure that we will not get any
        //  exceptions when accessing array elements.
        IF LENGTH OF data != 6 THEN
            THROW IllegalArgument <-
                "Incorrect number of columns."
        END
        IF !( data[0].equals <- "R" OR data[0].equals <- "r" THEN
            THROW IllegalArgument <- "Incorrect music type."
        END IF
        //ensure that the numbers are convertable.
        TRY
            inTrackNumber := Integer.parseInt <- data[4]
        CATCH NumberFormat ex
            THROW IllegalArgument <- TRACK_NUMBER_ERROR
        END TRY CATCH

        inPlaySpeedUpper := data[5].toUpperCase <- None

        validateRecord <- inTrackNumber, inPlaySpeedUpper

        SUPER.inputCSV <- Music.subArrayCopy <- data, 1, 4
        trackNumber := inTrackNumber
        playSpeed := inPlaySpeedUpper
    END




    SUBMODULE: getTrackNumber
    IMPORTS: None
    EXPORT: trackNumber (Integer)
    ALGORITHM:
        trackNumber
    END




    SUBMODULE: getPlaySpeed
    IMPORTS: None
    EXPORT: playSpeed (String)
    ALGORITHM:
        playSpeed
    END




    SUBMODULE: setTrackNumber
    IMPORTS: inTrackNumber (Integer)
    EXPORT: None
    ALGORITHM:
        IF !validateTrackNumber <- inTrackNumber THEN
            THROW IllegalArgument <- TRACK_NUMBER_ERROR
        END IF
        trackNumber := inTrackNumber
    END




    SUBMODULE: setPlaySpeed
    IMPORTS: inPlaySpeed (String)
    EXPORT: None
    ALGORITHM:
        IF inPlaySpeed = NULL
            THROW IllegalArgument <- PLAY_SPEED_ERROR
        END IF
        inPlaySpeedUpper := inPlaySpeed.toUpperCase <- None
        IF !validatePlaySpeed <- inPlaySpeedUpper THEN
            THROW IllegalArgument <- PLAY_SPEED_ERROR
        END IF
        playSpeed := inPlaySpeedUpper
    END




    SUBMODULE: equals
    IMPORTS: inObj (Object)
    EXPORT: same (Boolean)
    ALGORITHM:
        same := FALSE;
        IF inObj INSTANCEOF Record THEN
            inRecord := (Convert to Record)inObj;
            same =  SUPER.equals <- inRecord AND
                    inRecord.getTrackNumber <- None = trackNumber AND
                    (inRecord.getPlaySpeed <- None).equals <- playSpeed
        END IF
    END




    SUBMODULE: clone
    IMPORTS: None
    EXPORTS: recordClone (Record)
    ALGORITHM:
        recordClone := CONSTRUCT Record USING THIS
    END




    SUBMODULE: toString
    IMPORTS: None
    EXPORT: recordString (String)
    ALGORITHM:
        recordString := SUPER.toString <- None + ", track number: " +
            trackNumber +
            ", play speed: " + playSpeed
    END




    SUBMODULE: outputCSV
    IMPORTS: None
    EXPORT: output (String)
    ALGORITHM:
        output := "R," + SUPER.outputCSV <- None + "," +
            trackNumber + "," + playSpeed
    END




    SUBMODULE: search
    IMPORTS: inPlaySpeed (String)
    EXPORT: exists (Boolean)
    ALGORITHM:
        exists := FALSE
        IF inPlaySpeed != NULL THEN
            exists := (inPlaySpeed.toUpperCase <- None).equals <- playSpeed
        END IF
    END




    SUBMODULE: play
    IMPORTS: None
    EXPORT: playString (String)
    ALGORITHM:
        playString := SUPER.getName <- None + " is track number " +
            trackNumber +
            " and the record is to be played at " + playSpeed + "."
    END




    PRIVATE SUBMODULES:


    SUBMODULE: validateRecord
    IMPORTS: inTrackNumber (Integer), inPlaySpeed (String)
    EXPORT: None
    ALGORITHM:
        IF !validateTrackNumber <- inTrackNumber THEN
            THROW IllegalArgument <- TRACK_NUMBER_ERROR
        END IF
        IF !validatePlaySpeed <- inPlaySpeed THEN
            THROW IllegalArgument <- PLAY_SPEED_ERROR
        END IF
    END




    SUBMODULE: validateTrackNumber
    IMPORTS: inTrackNumber (Integer)
    EXPORT: valid (Boolean)
    ALGORITHM:
        valid := TRUE
        IF inTrackNumber < TRACK_NUMBER_MIN OR
            inTrackNumber >= TRACK_NUMBER_MAX THEN
            valid := FALSE
        END IF
    END




    SUBMODULE: validatePlaySpeed
    IMPORTS: inPlaySpeed (String)
    EXPORT: valid (Boolean)
    ALGORITHM:
        valid := FALSE
        FOR i := 0 TO LENGTH OF PLAY_SPEED_VALID (Exclusive) INC BY 1
            IF PLAY_SPEED_VALID[i].equals <- inPlaySpeed THEN
                valid := TRUE
            END IF
        END FOR
    END
